@page "/todo"
@page "/todolist"
@inject ITodoRepository TodoRepo

@if (_showError)
{
    <MudAlert Severity="Severity.Error">@_errorText</MudAlert>
}

<MudGrid Class="mb-10">
    <MudItem xs="12" sm="6" md="4"  >
        <MudTextField @bind-Value="NewTodo" Label="Add new task..." Variant="Variant.Text"></MudTextField>
    </MudItem>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="my-5" OnClick="AddTask">Add</MudButton>
</MudGrid>

<MudTable Items="@_todoItems" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h5">Todo List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Completed</MudTh>
        <MudTh>Task</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Completed"><MudCheckBox T="bool" Checked="@context.Completed" CheckedChanged="() => UpdateTask(context)" Color="Color.Primary"></MudCheckBox></MudTd>    
        
        @if (context.Completed)
        {
            <MudTd DataLabel="Task"><MudText Typo="Typo.h6" Style="font-style: italic; text-decoration: line-through;">@context.ItemName</MudText></MudTd>    
        }
        else
        {
            <MudTd DataLabel="Task"><MudText Typo="Typo.h6">@context.ItemName</MudText></MudTd>
        }
        
        <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => DeleteTask(context)"></MudIconButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Todo> _todoItems = new();
    private string _searchString = "";
    private string _errorText = "";
    private bool _showError = false;

    public string NewTodo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _todoItems = await TodoRepo.GetAllAsync();
    }

    private async Task AddTask()
    {
        _showError = false;

        Todo newItem = new()
        {
            Completed = false,
            ItemName = NewTodo
        };

        bool result = await TodoRepo.CreateAsync(newItem);

        if (result)
        {
            _todoItems = await TodoRepo.GetAllAsync();
            NewTodo = "";
        }
        else
        {
            _errorText = "Failed to add task";
            _showError = true;
        }
    }

    private async Task DeleteTask(Todo deleteItem)
    {
        _showError = false;

        bool result = await TodoRepo.DeleteAsync(deleteItem);

        if (result)
        {
            _todoItems = await TodoRepo.GetAllAsync();
        }
        else
        {
            _errorText = "Failed to delete task";
            _showError = true;
        }
    }

    private async Task UpdateTask(Todo updateItem)
    {
        _showError = false;

        updateItem.Completed = !updateItem.Completed;
        bool result = await TodoRepo.UpdateAsync(updateItem);

        if (result)
        {
            _todoItems = await TodoRepo.GetAllAsync();
        }
        else
        {
            _errorText = "Failed to update task";
            _showError = true;
        }
    }
}
